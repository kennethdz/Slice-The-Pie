import {
  require_classnames
} from "./chunk-QWQG2TMZ.js";
import {
  _extends,
  _objectWithoutPropertiesLoose
} from "./chunk-H2NMZL5F.js";
import {
  __toModule
} from "./chunk-XVNMABU7.js";
import {
  require_react
} from "./chunk-VD7M3R6Y.js";
import "./chunk-KHGO2BKN.js";

// node_modules/react-bootstrap/esm/ProgressBar.js
var import_classnames = __toModule(require_classnames());
var import_react3 = __toModule(require_react());

// node_modules/react-bootstrap/esm/ThemeProvider.js
var import_react = __toModule(require_react());
var ThemeContext = import_react.default.createContext({});
var Consumer = ThemeContext.Consumer;
var Provider = ThemeContext.Provider;
function useBootstrapPrefix(prefix, defaultPrefix) {
  var prefixes = (0, import_react.useContext)(ThemeContext);
  return prefix || prefixes[defaultPrefix] || defaultPrefix;
}

// node_modules/react-bootstrap/esm/ElementChildren.js
var import_react2 = __toModule(require_react());
function map(children, func) {
  var index = 0;
  return import_react2.default.Children.map(children, function(child) {
    return import_react2.default.isValidElement(child) ? func(child, index++) : child;
  });
}

// node_modules/react-bootstrap/esm/ProgressBar.js
var ROUND_PRECISION = 1e3;
var defaultProps = {
  min: 0,
  max: 100,
  animated: false,
  isChild: false,
  srOnly: false,
  striped: false
};
function getPercentage(now, min, max) {
  var percentage = (now - min) / (max - min) * 100;
  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar(_ref, ref) {
  var _classNames;
  var min = _ref.min, now = _ref.now, max = _ref.max, label = _ref.label, srOnly = _ref.srOnly, striped = _ref.striped, animated = _ref.animated, className = _ref.className, style = _ref.style, variant = _ref.variant, bsPrefix = _ref.bsPrefix, props = _objectWithoutPropertiesLoose(_ref, ["min", "now", "max", "label", "srOnly", "striped", "animated", "className", "style", "variant", "bsPrefix"]);
  return import_react3.default.createElement("div", _extends({
    ref
  }, props, {
    role: "progressbar",
    className: (0, import_classnames.default)(className, bsPrefix + "-bar", (_classNames = {}, _classNames["bg-" + variant] = variant, _classNames[bsPrefix + "-bar-animated"] = animated, _classNames[bsPrefix + "-bar-striped"] = animated || striped, _classNames)),
    style: _extends({
      width: getPercentage(now, min, max) + "%"
    }, style),
    "aria-valuenow": now,
    "aria-valuemin": min,
    "aria-valuemax": max
  }), srOnly ? import_react3.default.createElement("span", {
    className: "sr-only"
  }, label) : label);
}
var ProgressBar = import_react3.default.forwardRef(function(_ref2, ref) {
  var isChild = _ref2.isChild, props = _objectWithoutPropertiesLoose(_ref2, ["isChild"]);
  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, "progress");
  if (isChild) {
    return renderProgressBar(props, ref);
  }
  var min = props.min, now = props.now, max = props.max, label = props.label, srOnly = props.srOnly, striped = props.striped, animated = props.animated, bsPrefix = props.bsPrefix, variant = props.variant, className = props.className, children = props.children, wrapperProps = _objectWithoutPropertiesLoose(props, ["min", "now", "max", "label", "srOnly", "striped", "animated", "bsPrefix", "variant", "className", "children"]);
  return import_react3.default.createElement("div", _extends({
    ref
  }, wrapperProps, {
    className: (0, import_classnames.default)(className, bsPrefix)
  }), children ? map(children, function(child) {
    return (0, import_react3.cloneElement)(child, {
      isChild: true
    });
  }) : renderProgressBar({
    min,
    now,
    max,
    label,
    srOnly,
    striped,
    animated,
    bsPrefix,
    variant
  }, ref));
});
ProgressBar.displayName = "ProgressBar";
ProgressBar.defaultProps = defaultProps;
var ProgressBar_default = ProgressBar;

// dep:react-bootstrap_ProgressBar
var react_bootstrap_ProgressBar_default = ProgressBar_default;
export {
  react_bootstrap_ProgressBar_default as default
};
//# sourceMappingURL=react-bootstrap_ProgressBar.js.map
